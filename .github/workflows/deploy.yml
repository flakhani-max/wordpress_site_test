name: Deploy WordPress to Cloud Run

on:
  push:
    branches: [ "main" ]   # change if your deploy branch is different
  workflow_dispatch:       # allow manual runs from the Actions tab

env:
  # Artifact Registry repo name (will be created if missing)
  AR_REPO: wordpress
  # Image name inside the repo
  IMAGE_NAME: wordpress

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # ---- AUTHENTICATION ----
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          # Add this JSON to GitHub Secrets
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Install gcloud CLI
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          export_default_credentials: true

      # ---- ARTIFACT REGISTRY PREP ----
      - name: Ensure Artifact Registry repository exists
        run: |
          set -e
          if ! gcloud artifacts repositories describe "$AR_REPO" --location="${{ secrets.REGION }}" >/dev/null 2>&1; then
            echo "Creating Artifact Registry repo: $AR_REPO in ${{ secrets.REGION }}"
            gcloud artifacts repositories create "$AR_REPO" \
              --repository-format=docker \
              --location="${{ secrets.REGION }}" \
              --description="WordPress images for Cloud Run"
          else
            echo "Artifact Registry repo $AR_REPO already exists."
          fi

      - name: Configure Docker to use Artifact Registry
        run: gcloud auth configure-docker ${{ secrets.REGION }}-docker.pkg.dev --quiet

      # ---- BUILD & PUSH ----
      - name: Build and Push Docker image
        run: |
          set -e
          IMAGE_URI="${{ secrets.REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/$AR_REPO/$IMAGE_NAME:$(date +%Y%m%d-%H%M%S)-${{ github.sha }}"
          echo "Building $IMAGE_URI"
          docker build -t "$IMAGE_URI" .
          docker push "$IMAGE_URI"
          echo "IMAGE_URI=$IMAGE_URI" >> $GITHUB_ENV

      # ---- DEPLOY TO CLOUD RUN ----
      - name: Deploy to Cloud Run
        run: |
          set -e

          # Required variables (set in repo Secrets)
          SERVICE="${{ secrets.SERVICE_NAME }}"
          REGION="${{ secrets.REGION }}"
          CONNECTION_NAME="${{ secrets.CLOUDSQL_CONNECTION_NAME }}"
          DB_USER="${{ secrets.DB_USER }}"
          DB_PASS="${{ secrets.DB_PASS }}"
          DB_NAME="${{ secrets.DB_NAME }}"

          # Sanity checks
          test -n "$SERVICE"
          test -n "$REGION"
          test -n "$CONNECTION_NAME"
          test -n "$DB_USER"
          test -n "$DB_PASS"
          test -n "$DB_NAME"

          # Note: WordPress connects via the Cloud SQL Unix socket path in /cloudsql/<connection_name>
          # Ensure your container listens on the PORT env var (Cloud Run sets PORT=8080).
          # If you use Apache, your image/entrypoint should honor $PORT.

          gcloud run deploy "$SERVICE" \
            --image "$IMAGE_URI" \
            --region "$REGION" \
            --platform managed \
            --allow-unauthenticated \
            --add-cloudsql-instances "$CONNECTION_NAME" \
            --set-env-vars WORDPRESS_DB_HOST=/cloudsql/$CONNECTION_NAME \
            --set-env-vars WORDPRESS_DB_USER="$DB_USER" \
            --set-env-vars WORDPRESS_DB_PASSWORD="$DB_PASS" \
            --set-env-vars WORDPRESS_DB_NAME="$DB_NAME" \
            --set-env-vars PORT=8080 \
            --cpu 1 \
            --memory 512Mi \
            --concurrency 80 \
            --min-instances 0

          # Optional: pin all traffic to latest revision
          gcloud run services update-traffic "$SERVICE" \
            --region "$REGION" \
            --to-latest

      - name: Show Service URL
        run: |
          URL=$(gcloud run services describe ${{ secrets.SERVICE_NAME }} --region ${{ secrets.REGION }} --format='value(status.url)')
          echo "Deployed URL: $URL"
          echo "SERVICE_URL=$URL" >> $GITHUB_ENV
